import { Directive, ElementRef, Input } from '@angular/core';
import { defaults } from '../utils/defaults/defaults';
import { defaultOptions } from '../models/default-options';
import { SplitNodes } from '../utils/split-nodes/split-nodes';
export class NgGxSplitTextDirective {
    constructor(el) {
        this.el = el;
        this.options = defaultOptions;
        this.init = false;
    }
    ngOnInit() {
        this.setCurrentOptions();
        this.initSplitNodes();
    }
    ngAfterViewInit() {
        if (!this.currentOptions.defer) {
            this.initSplit();
        }
    }
    initSplit() {
        if (this.init) {
            console.warn('Warning! Text is already initialized');
            return;
        }
        this.init = true;
        this.saveSrcText();
        this.splitNodes.initSplitNodes();
    }
    saveSrcText() {
        this.srcTextContent = this.el.nativeElement.innerHTML;
    }
    get words() {
        return this.splitNodes.words;
    }
    get lineWords() {
        return this.splitNodes.lineWords;
    }
    get chars() {
        if (this.options.onlyWords) {
            console.warn('Warning! You chose only words.');
            return;
        }
        return this.splitNodes.chars;
    }
    get lineChars() {
        if (this.options.onlyWords) {
            console.warn('Warning! You chose only words.');
            return;
        }
        return this.splitNodes.lineChars;
    }
    get nativeElement() {
        return this.el.nativeElement;
    }
    get srcText() {
        return this.srcTextContent;
    }
    get isInit() {
        return this.init;
    }
    resetSplit() {
        this.nativeElement.innerHTML = this.srcText;
    }
    setCurrentOptions() {
        this.currentOptions = defaults(this.options, defaultOptions);
    }
    initSplitNodes() {
        this.splitNodes = new SplitNodes(this.el.nativeElement.textContent, this.el.nativeElement, this.currentOptions);
    }
}
NgGxSplitTextDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngGxSplitText], ngGxSplitText'
            },] }
];
NgGxSplitTextDirective.ctorParameters = () => [
    { type: ElementRef }
];
NgGxSplitTextDirective.propDecorators = {
    options: [{ type: Input, args: ['splitOptions',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctZ3gtc3BsaXQtdGV4dC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL3lhbi9EZXNrdG9wL25nLWd4LXNwbGl0LXRleHQtZGVtby9wcm9qZWN0cy9uZy1neC1zcGxpdC10ZXh0L3NyYy8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL25nLWd4LXNwbGl0LXRleHQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBaUIsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDcEYsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRXRELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFNOUQsTUFBTSxPQUFPLHNCQUFzQjtJQVFqQyxZQUNVLEVBQTJCO1FBQTNCLE9BQUUsR0FBRixFQUFFLENBQXlCO1FBUmQsWUFBTyxHQUFZLGNBQWMsQ0FBQztRQUdqRCxTQUFJLEdBQUcsS0FBSyxDQUFDO0lBT3JCLENBQUM7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDekIsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFFRCxlQUFlO1FBQ2IsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFO1lBQzlCLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztTQUNsQjtJQUNILENBQUM7SUFFTSxTQUFTO1FBQ2QsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ2IsT0FBTyxDQUFDLElBQUksQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO1lBQ3JELE9BQU87U0FDUjtRQUNELElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNuQixJQUFJLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ25DLENBQUM7SUFFTyxXQUFXO1FBQ2pCLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDO0lBQ3hELENBQUM7SUFFRCxJQUFXLEtBQUs7UUFDZCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDO0lBQy9CLENBQUM7SUFFRCxJQUFXLFNBQVM7UUFDbEIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQztJQUNuQyxDQUFDO0lBRUQsSUFBVyxLQUFLO1FBQ2QsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBQztZQUN6QixPQUFPLENBQUMsSUFBSSxDQUFDLGdDQUFnQyxDQUFDLENBQUM7WUFDL0MsT0FBTztTQUNSO1FBQ0QsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQztJQUMvQixDQUFDO0lBRUQsSUFBVyxTQUFTO1FBQ2xCLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUM7WUFDekIsT0FBTyxDQUFDLElBQUksQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1lBQy9DLE9BQU87U0FDUjtRQUNELE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUM7SUFDbkMsQ0FBQztJQUVELElBQVcsYUFBYTtRQUN0QixPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDO0lBQy9CLENBQUM7SUFFRCxJQUFXLE9BQU87UUFDaEIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDO0lBQzdCLENBQUM7SUFFRCxJQUFXLE1BQU07UUFDZixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDbkIsQ0FBQztJQUVNLFVBQVU7UUFDZixJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQzlDLENBQUM7SUFFTyxpQkFBaUI7UUFDdkIsSUFBSSxDQUFDLGNBQWMsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxjQUFjLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBRU8sY0FBYztRQUNwQixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDbEgsQ0FBQzs7O1lBeEZGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsZ0NBQWdDO2FBQzNDOzs7WUFSa0MsVUFBVTs7O3NCQVcxQyxLQUFLLFNBQUMsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5wdXQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZGVmYXVsdHMgfSBmcm9tICcuLi91dGlscy9kZWZhdWx0cy9kZWZhdWx0cyc7XG5pbXBvcnQgeyBPcHRpb25zIH0gZnJvbSAnLi4vbW9kZWxzL29wdGlvbnMnO1xuaW1wb3J0IHsgZGVmYXVsdE9wdGlvbnMgfSBmcm9tICcuLi9tb2RlbHMvZGVmYXVsdC1vcHRpb25zJztcbmltcG9ydCB7IFNwbGl0Tm9kZXMgfSBmcm9tICcuLi91dGlscy9zcGxpdC1ub2Rlcy9zcGxpdC1ub2Rlcyc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tuZ0d4U3BsaXRUZXh0XSwgbmdHeFNwbGl0VGV4dCdcbn0pXG5cbmV4cG9ydCBjbGFzcyBOZ0d4U3BsaXRUZXh0RGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0IHtcbiAgQElucHV0KCdzcGxpdE9wdGlvbnMnKSBvcHRpb25zOiBPcHRpb25zID0gZGVmYXVsdE9wdGlvbnM7XG5cbiAgcHJpdmF0ZSBzcmNUZXh0Q29udGVudDogc3RyaW5nO1xuICBwcml2YXRlIGluaXQgPSBmYWxzZTtcbiAgcHJpdmF0ZSBjdXJyZW50T3B0aW9uczogT3B0aW9ucztcbiAgcHJpdmF0ZSBzcGxpdE5vZGVzOiBTcGxpdE5vZGVzO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZWw6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICApIHtcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMuc2V0Q3VycmVudE9wdGlvbnMoKTtcbiAgICB0aGlzLmluaXRTcGxpdE5vZGVzKCk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmN1cnJlbnRPcHRpb25zLmRlZmVyKSB7XG4gICAgICB0aGlzLmluaXRTcGxpdCgpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBpbml0U3BsaXQoKSB7XG4gICAgaWYgKHRoaXMuaW5pdCkge1xuICAgICAgY29uc29sZS53YXJuKCdXYXJuaW5nISBUZXh0IGlzIGFscmVhZHkgaW5pdGlhbGl6ZWQnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5pbml0ID0gdHJ1ZTtcbiAgICB0aGlzLnNhdmVTcmNUZXh0KCk7XG4gICAgdGhpcy5zcGxpdE5vZGVzLmluaXRTcGxpdE5vZGVzKCk7XG4gIH1cblxuICBwcml2YXRlIHNhdmVTcmNUZXh0KCkge1xuICAgIHRoaXMuc3JjVGV4dENvbnRlbnQgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuaW5uZXJIVE1MO1xuICB9XG5cbiAgcHVibGljIGdldCB3b3JkcygpIHtcbiAgICByZXR1cm4gdGhpcy5zcGxpdE5vZGVzLndvcmRzO1xuICB9XG5cbiAgcHVibGljIGdldCBsaW5lV29yZHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3BsaXROb2Rlcy5saW5lV29yZHM7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGNoYXJzKCkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMub25seVdvcmRzKXtcbiAgICAgIGNvbnNvbGUud2FybignV2FybmluZyEgWW91IGNob3NlIG9ubHkgd29yZHMuJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnNwbGl0Tm9kZXMuY2hhcnM7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGxpbmVDaGFycygpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLm9ubHlXb3Jkcyl7XG4gICAgICBjb25zb2xlLndhcm4oJ1dhcm5pbmchIFlvdSBjaG9zZSBvbmx5IHdvcmRzLicpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5zcGxpdE5vZGVzLmxpbmVDaGFycztcbiAgfVxuXG4gIHB1YmxpYyBnZXQgbmF0aXZlRWxlbWVudCgpIHtcbiAgICByZXR1cm4gdGhpcy5lbC5uYXRpdmVFbGVtZW50O1xuICB9XG5cbiAgcHVibGljIGdldCBzcmNUZXh0KCkge1xuICAgIHJldHVybiB0aGlzLnNyY1RleHRDb250ZW50O1xuICB9XG5cbiAgcHVibGljIGdldCBpc0luaXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5pdDtcbiAgfVxuXG4gIHB1YmxpYyByZXNldFNwbGl0KCkge1xuICAgIHRoaXMubmF0aXZlRWxlbWVudC5pbm5lckhUTUwgPSB0aGlzLnNyY1RleHQ7XG4gIH1cblxuICBwcml2YXRlIHNldEN1cnJlbnRPcHRpb25zKCkge1xuICAgIHRoaXMuY3VycmVudE9wdGlvbnMgPSBkZWZhdWx0cyh0aGlzLm9wdGlvbnMsIGRlZmF1bHRPcHRpb25zKTtcbiAgfVxuXG4gIHByaXZhdGUgaW5pdFNwbGl0Tm9kZXMoKSB7XG4gICAgdGhpcy5zcGxpdE5vZGVzID0gbmV3IFNwbGl0Tm9kZXModGhpcy5lbC5uYXRpdmVFbGVtZW50LnRleHRDb250ZW50LCB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsIHRoaXMuY3VycmVudE9wdGlvbnMpO1xuICB9XG59XG4iXX0=