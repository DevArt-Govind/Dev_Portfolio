{"version":3,"sources":["../../../projects/ng-gx-split-text/src/lib/utils/defaults/defaults.ts","../../../projects/ng-gx-split-text/src/lib/models/default-options.ts","../../../projects/ng-gx-split-text/src/lib/utils/split-nodes/split-nodes.ts","../../../projects/ng-gx-split-text/src/lib/directives/ng-gx-split-text.directive.ts","../../../projects/ng-gx-split-text/src/lib/ng-gx-split-text.module.ts"],"names":["objectProto","Object","prototype","hasOwnProperty","eq","value","other","defaultOptions","defer","onlyWords","mask","SplitNodes","textContent","el","options","this","words","chars","lineWords","lineChars","wordsArray","nodes","nodeTypes","ELEMENT_NODE","ATTRIBUTE_NODE","TEXT_NODE","CDATA_SECTION_NODE","ENTITY_REFERENCE_NODE","ENTITY_NODE","PROCESSING_INSTRUCTION_NODE","COMMENT_NODE","DOCUMENT_NODE","DOCUMENT_TYPE_NODE","DOCUMENT_FRAGMENT_NODE","NOTATION_NODE","initSplitNodes","splitNodes","initNewNodes","setLines","updateOnResize","_this","i","node","childNodes","tag","this_1","indexOf","nodeType","text","splitNodesIntoWords","wordsArray_1","forEach","wordSpan","document","createElement","classList","add","style","display","textIndent","innerHTML","join","char","charSpan","appendChild","push","length","index","word","idx","maskSpan","overflow","verticalAlign","parentNode","insertBefore","spaceSpan","nextSibling","remove","split","splice","map","item","getLines","elements","lineElements","line","lineIndex","firstElTop","getBoundingClientRect","top","lastElIndex","fromEvent","window","subscribe","NgGxSplitTextDirective","init","ngOnInit","setCurrentOptions","ngAfterViewInit","currentOptions","initSplit","console","warn","saveSrcText","srcTextContent","nativeElement","defineProperty","resetSplit","srcText","object","sources","_i","arguments","source","key","undefined","call","defaults","Directive","args","selector","ElementRef","Input","NgModule","declarations","imports","exports"],"mappings":"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","sourcesContent":["const objectProto = Object.prototype;\nconst hasOwnProperty = objectProto.hasOwnProperty;\n\n\nexport function defaults(object, ...sources) {\n  object = Object(object);\n  sources.forEach((source) => {\n    if (source != null) {\n      source = Object(source);\n      for (const key in source) {\n        if (source.hasOwnProperty(key)) {\n          const value = object[key];\n          if (value === undefined ||\n            (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n            object[key] = source[key];\n          }\n        }\n      }\n    }\n  });\n  return object;\n}\n\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n","import { Options } from './options';\n\nexport const defaultOptions: Options = {\n  defer: false,\n  onlyWords: false,\n  mask: false,\n};\n","import { fromEvent } from 'rxjs';\nimport { Options } from \"../../models/options\";\n\nexport class SplitNodes {\n\n  constructor(\n    private textContent: string,\n    private el: HTMLElement,\n    private options: Options\n  ) {\n  }\n\n  words: HTMLElement[] = [];\n  chars: HTMLElement[] = [];\n  lineWords: HTMLElement[] = [];\n  lineChars: HTMLElement[] = [];\n\n  wordsArray: HTMLElement[][] = [];\n  nodes = [];\n\n  nodeTypes = {\n    ELEMENT_NODE: 1,\n    ATTRIBUTE_NODE: 2,\n    TEXT_NODE: 3,\n    CDATA_SECTION_NODE: 4,\n    ENTITY_REFERENCE_NODE: 5,\n    ENTITY_NODE: 6,\n    PROCESSING_INSTRUCTION_NODE: 7,\n    COMMENT_NODE: 8,\n    DOCUMENT_NODE: 9,\n    DOCUMENT_TYPE_NODE: 10,\n    DOCUMENT_FRAGMENT_NODE: 11,\n    NOTATION_NODE: 12\n  };\n\n  initSplitNodes() {\n    this.splitNodes(this.el);\n    this.initNewNodes();\n    this.setLines();\n    this.updateOnResize();\n  }\n\n\n  splitNodes(el) {\n    for (let i = 0; i < el.childNodes.length; i++) {\n      const node = el.childNodes[i];\n      const tag = [this.nodeTypes.ELEMENT_NODE, this.nodeTypes.DOCUMENT_NODE, this.nodeTypes.DOCUMENT_FRAGMENT_NODE].indexOf(node.nodeType) !== -1;\n      const text = [this.nodeTypes.TEXT_NODE, this.nodeTypes.CDATA_SECTION_NODE].indexOf(node.nodeType) !== -1;\n\n      if (tag) {\n        this.splitNodes(node);\n      } else if (text) {\n        const words = this.splitNodesIntoWords(node);\n\n        const wordsArray = [];\n        words.forEach(chars => {\n          const wordSpan = document.createElement('span');\n          wordSpan.classList.add('split-text-word');\n          wordSpan.style.display = 'inline-block';\n          wordSpan.style.textIndent = '0';\n\n          if (this.options.onlyWords) {\n            wordSpan.innerHTML = chars.join('');\n          } else {\n            chars.forEach(char => {\n              const charSpan = document.createElement('span');\n              charSpan.classList.add('split-text-char');\n              charSpan.style.display = 'inherit';\n              charSpan.style.textIndent = '0';\n              charSpan.innerHTML = char;\n              wordSpan.appendChild(charSpan);\n              this.chars.push(charSpan);\n            });\n          }\n\n          wordsArray.push(wordSpan);\n          this.words.push(wordSpan);\n        });\n\n        this.wordsArray.push(wordsArray);\n        this.nodes.push(node);\n      }\n    }\n  }\n\n  initNewNodes() {\n    this.nodes.forEach((node, index) => {\n      this.wordsArray[index].forEach((word, idx) => {\n        let maskSpan: HTMLElement;\n        if (this.options.mask) {\n          maskSpan = document.createElement('span');\n          maskSpan.classList.add('split-text-mask');\n          maskSpan.style.display = 'inline-block';\n          maskSpan.style.overflow = 'hidden';\n          maskSpan.style.textIndent = '0';\n          maskSpan.style.verticalAlign = 'top';\n          maskSpan.appendChild(word)\n          node.parentNode.insertBefore(maskSpan, node);\n        } else {\n          node.parentNode.insertBefore(word, node);\n        }\n\n        const spaceSpan = document.createElement('span');\n        spaceSpan.classList.add('split-text-space');\n        spaceSpan.style.display = 'inline';\n        spaceSpan.innerHTML = ' ';\n\n        if (this.options.mask) {\n          node.parentNode.insertBefore(spaceSpan, maskSpan.nextSibling);\n        } else {\n          node.parentNode.insertBefore(spaceSpan, word.nextSibling);\n        }\n\n        if (idx === this.wordsArray[index].length - 1) {\n          node.remove();\n        }\n      });\n    });\n  }\n\n  splitNodesIntoWords(word) {\n    const words = word.textContent.split(' ');\n\n    if (words[0] === '') {\n      words.splice(0, 1);\n    }\n\n    if (words[words.length - 1] === '') {\n      words.splice(words.length - 1, 1);\n    }\n\n    return words.map(item => item.split(''));\n  }\n\n  getLines(elements) {\n    const lineElements = [];\n    let line = [];\n    let lineIndex = 0;\n\n    elements.forEach((el, index) => {\n\n      const firstElTop = elements[lineIndex].getBoundingClientRect().top;\n      const lastElIndex = elements.length - 1;\n\n      if (el.getBoundingClientRect().top === firstElTop) {\n        line.push(el);\n        if (index === lastElIndex) {\n          lineElements.push(line);\n        }\n      } else {\n        lineElements.push(line);\n        lineIndex = index;\n        line = [];\n        line.push(el);\n      }\n    });\n\n    return lineElements;\n  }\n\n  updateOnResize() {\n    fromEvent<UIEvent>(window, 'resize')\n      .subscribe(() => {\n        this.setLines();\n      });\n  }\n\n  setLines() {\n    this.lineWords = this.getLines(this.words);\n    if (!this.options.onlyWords) {\n      this.lineChars = this.getLines(this.chars);\n    }\n  }\n}\n","import { AfterViewInit, Directive, ElementRef, Input, OnInit } from '@angular/core';\nimport { defaults } from '../utils/defaults/defaults';\nimport { Options } from '../models/options';\nimport { defaultOptions } from '../models/default-options';\nimport { SplitNodes } from '../utils/split-nodes/split-nodes';\n\n@Directive({\n  selector: '[ngGxSplitText], ngGxSplitText'\n})\n\nexport class NgGxSplitTextDirective implements OnInit, AfterViewInit {\n  @Input('splitOptions') options: Options = defaultOptions;\n\n  private srcTextContent: string;\n  private init = false;\n  private currentOptions: Options;\n  private splitNodes: SplitNodes;\n\n  constructor(\n    private el: ElementRef<HTMLElement>,\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.setCurrentOptions();\n    this.initSplitNodes();\n  }\n\n  ngAfterViewInit(): void {\n    if (!this.currentOptions.defer) {\n      this.initSplit();\n    }\n  }\n\n  public initSplit() {\n    if (this.init) {\n      console.warn('Warning! Text is already initialized');\n      return;\n    }\n    this.init = true;\n    this.saveSrcText();\n    this.splitNodes.initSplitNodes();\n  }\n\n  private saveSrcText() {\n    this.srcTextContent = this.el.nativeElement.innerHTML;\n  }\n\n  public get words() {\n    return this.splitNodes.words;\n  }\n\n  public get lineWords() {\n    return this.splitNodes.lineWords;\n  }\n\n  public get chars() {\n    if (this.options.onlyWords){\n      console.warn('Warning! You chose only words.');\n      return;\n    }\n    return this.splitNodes.chars;\n  }\n\n  public get lineChars() {\n    if (this.options.onlyWords){\n      console.warn('Warning! You chose only words.');\n      return;\n    }\n    return this.splitNodes.lineChars;\n  }\n\n  public get nativeElement() {\n    return this.el.nativeElement;\n  }\n\n  public get srcText() {\n    return this.srcTextContent;\n  }\n\n  public get isInit() {\n    return this.init;\n  }\n\n  public resetSplit() {\n    this.nativeElement.innerHTML = this.srcText;\n  }\n\n  private setCurrentOptions() {\n    this.currentOptions = defaults(this.options, defaultOptions);\n  }\n\n  private initSplitNodes() {\n    this.splitNodes = new SplitNodes(this.el.nativeElement.textContent, this.el.nativeElement, this.currentOptions);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NgGxSplitTextDirective } from \"./directives/ng-gx-split-text.directive\";\n\n\n\n@NgModule({\n  declarations: [NgGxSplitTextDirective],\n  imports: [\n  ],\n  exports: [NgGxSplitTextDirective]\n})\nexport class NgGxSplitTextModule { }\n"]}