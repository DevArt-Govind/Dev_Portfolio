{"version":3,"file":"ng-gx-split-text.umd.js","sources":["../../../projects/ng-gx-split-text/src/lib/utils/defaults/defaults.ts","../../../projects/ng-gx-split-text/src/lib/models/default-options.ts","../../../projects/ng-gx-split-text/src/lib/utils/split-nodes/split-nodes.ts","../../../projects/ng-gx-split-text/src/lib/directives/ng-gx-split-text.directive.ts","../../../projects/ng-gx-split-text/src/lib/ng-gx-split-text.module.ts","../../../projects/ng-gx-split-text/src/public-api.ts","../../../projects/ng-gx-split-text/src/ng-gx-split-text.ts"],"sourcesContent":["const objectProto = Object.prototype;\nconst hasOwnProperty = objectProto.hasOwnProperty;\n\n\nexport function defaults(object, ...sources) {\n  object = Object(object);\n  sources.forEach((source) => {\n    if (source != null) {\n      source = Object(source);\n      for (const key in source) {\n        if (source.hasOwnProperty(key)) {\n          const value = object[key];\n          if (value === undefined ||\n            (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n            object[key] = source[key];\n          }\n        }\n      }\n    }\n  });\n  return object;\n}\n\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n","import { Options } from './options';\n\nexport const defaultOptions: Options = {\n  defer: false,\n  onlyWords: false,\n  mask: false,\n};\n","import { fromEvent } from 'rxjs';\nimport { Options } from \"../../models/options\";\n\nexport class SplitNodes {\n\n  constructor(\n    private textContent: string,\n    private el: HTMLElement,\n    private options: Options\n  ) {\n  }\n\n  words: HTMLElement[] = [];\n  chars: HTMLElement[] = [];\n  lineWords: HTMLElement[] = [];\n  lineChars: HTMLElement[] = [];\n\n  wordsArray: HTMLElement[][] = [];\n  nodes = [];\n\n  nodeTypes = {\n    ELEMENT_NODE: 1,\n    ATTRIBUTE_NODE: 2,\n    TEXT_NODE: 3,\n    CDATA_SECTION_NODE: 4,\n    ENTITY_REFERENCE_NODE: 5,\n    ENTITY_NODE: 6,\n    PROCESSING_INSTRUCTION_NODE: 7,\n    COMMENT_NODE: 8,\n    DOCUMENT_NODE: 9,\n    DOCUMENT_TYPE_NODE: 10,\n    DOCUMENT_FRAGMENT_NODE: 11,\n    NOTATION_NODE: 12\n  };\n\n  initSplitNodes() {\n    this.splitNodes(this.el);\n    this.initNewNodes();\n    this.setLines();\n    this.updateOnResize();\n  }\n\n\n  splitNodes(el) {\n    for (let i = 0; i < el.childNodes.length; i++) {\n      const node = el.childNodes[i];\n      const tag = [this.nodeTypes.ELEMENT_NODE, this.nodeTypes.DOCUMENT_NODE, this.nodeTypes.DOCUMENT_FRAGMENT_NODE].indexOf(node.nodeType) !== -1;\n      const text = [this.nodeTypes.TEXT_NODE, this.nodeTypes.CDATA_SECTION_NODE].indexOf(node.nodeType) !== -1;\n\n      if (tag) {\n        this.splitNodes(node);\n      } else if (text) {\n        const words = this.splitNodesIntoWords(node);\n\n        const wordsArray = [];\n        words.forEach(chars => {\n          const wordSpan = document.createElement('span');\n          wordSpan.classList.add('split-text-word');\n          wordSpan.style.display = 'inline-block';\n          wordSpan.style.textIndent = '0';\n\n          if (this.options.onlyWords) {\n            wordSpan.innerHTML = chars.join('');\n          } else {\n            chars.forEach(char => {\n              const charSpan = document.createElement('span');\n              charSpan.classList.add('split-text-char');\n              charSpan.style.display = 'inherit';\n              charSpan.style.textIndent = '0';\n              charSpan.innerHTML = char;\n              wordSpan.appendChild(charSpan);\n              this.chars.push(charSpan);\n            });\n          }\n\n          wordsArray.push(wordSpan);\n          this.words.push(wordSpan);\n        });\n\n        this.wordsArray.push(wordsArray);\n        this.nodes.push(node);\n      }\n    }\n  }\n\n  initNewNodes() {\n    this.nodes.forEach((node, index) => {\n      this.wordsArray[index].forEach((word, idx) => {\n        let maskSpan: HTMLElement;\n        if (this.options.mask) {\n          maskSpan = document.createElement('span');\n          maskSpan.classList.add('split-text-mask');\n          maskSpan.style.display = 'inline-block';\n          maskSpan.style.overflow = 'hidden';\n          maskSpan.style.textIndent = '0';\n          maskSpan.style.verticalAlign = 'top';\n          maskSpan.appendChild(word)\n          node.parentNode.insertBefore(maskSpan, node);\n        } else {\n          node.parentNode.insertBefore(word, node);\n        }\n\n        const spaceSpan = document.createElement('span');\n        spaceSpan.classList.add('split-text-space');\n        spaceSpan.style.display = 'inline';\n        spaceSpan.innerHTML = ' ';\n\n        if (this.options.mask) {\n          node.parentNode.insertBefore(spaceSpan, maskSpan.nextSibling);\n        } else {\n          node.parentNode.insertBefore(spaceSpan, word.nextSibling);\n        }\n\n        if (idx === this.wordsArray[index].length - 1) {\n          node.remove();\n        }\n      });\n    });\n  }\n\n  splitNodesIntoWords(word) {\n    const words = word.textContent.split(' ');\n\n    if (words[0] === '') {\n      words.splice(0, 1);\n    }\n\n    if (words[words.length - 1] === '') {\n      words.splice(words.length - 1, 1);\n    }\n\n    return words.map(item => item.split(''));\n  }\n\n  getLines(elements) {\n    const lineElements = [];\n    let line = [];\n    let lineIndex = 0;\n\n    elements.forEach((el, index) => {\n\n      const firstElTop = elements[lineIndex].getBoundingClientRect().top;\n      const lastElIndex = elements.length - 1;\n\n      if (el.getBoundingClientRect().top === firstElTop) {\n        line.push(el);\n        if (index === lastElIndex) {\n          lineElements.push(line);\n        }\n      } else {\n        lineElements.push(line);\n        lineIndex = index;\n        line = [];\n        line.push(el);\n      }\n    });\n\n    return lineElements;\n  }\n\n  updateOnResize() {\n    fromEvent<UIEvent>(window, 'resize')\n      .subscribe(() => {\n        this.setLines();\n      });\n  }\n\n  setLines() {\n    this.lineWords = this.getLines(this.words);\n    if (!this.options.onlyWords) {\n      this.lineChars = this.getLines(this.chars);\n    }\n  }\n}\n","import { AfterViewInit, Directive, ElementRef, Input, OnInit } from '@angular/core';\nimport { defaults } from '../utils/defaults/defaults';\nimport { Options } from '../models/options';\nimport { defaultOptions } from '../models/default-options';\nimport { SplitNodes } from '../utils/split-nodes/split-nodes';\n\n@Directive({\n  selector: '[ngGxSplitText], ngGxSplitText'\n})\n\nexport class NgGxSplitTextDirective implements OnInit, AfterViewInit {\n  @Input('splitOptions') options: Options = defaultOptions;\n\n  private srcTextContent: string;\n  private init = false;\n  private currentOptions: Options;\n  private splitNodes: SplitNodes;\n\n  constructor(\n    private el: ElementRef<HTMLElement>,\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.setCurrentOptions();\n    this.initSplitNodes();\n  }\n\n  ngAfterViewInit(): void {\n    if (!this.currentOptions.defer) {\n      this.initSplit();\n    }\n  }\n\n  public initSplit() {\n    if (this.init) {\n      console.warn('Warning! Text is already initialized');\n      return;\n    }\n    this.init = true;\n    this.saveSrcText();\n    this.splitNodes.initSplitNodes();\n  }\n\n  private saveSrcText() {\n    this.srcTextContent = this.el.nativeElement.innerHTML;\n  }\n\n  public get words() {\n    return this.splitNodes.words;\n  }\n\n  public get lineWords() {\n    return this.splitNodes.lineWords;\n  }\n\n  public get chars() {\n    if (this.options.onlyWords){\n      console.warn('Warning! You chose only words.');\n      return;\n    }\n    return this.splitNodes.chars;\n  }\n\n  public get lineChars() {\n    if (this.options.onlyWords){\n      console.warn('Warning! You chose only words.');\n      return;\n    }\n    return this.splitNodes.lineChars;\n  }\n\n  public get nativeElement() {\n    return this.el.nativeElement;\n  }\n\n  public get srcText() {\n    return this.srcTextContent;\n  }\n\n  public get isInit() {\n    return this.init;\n  }\n\n  public resetSplit() {\n    this.nativeElement.innerHTML = this.srcText;\n  }\n\n  private setCurrentOptions() {\n    this.currentOptions = defaults(this.options, defaultOptions);\n  }\n\n  private initSplitNodes() {\n    this.splitNodes = new SplitNodes(this.el.nativeElement.textContent, this.el.nativeElement, this.currentOptions);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NgGxSplitTextDirective } from \"./directives/ng-gx-split-text.directive\";\n\n\n\n@NgModule({\n  declarations: [NgGxSplitTextDirective],\n  imports: [\n  ],\n  exports: [NgGxSplitTextDirective]\n})\nexport class NgGxSplitTextModule { }\n","/*\n * Public API Surface of ng-gx-split-text\n */\n\nexport * from './lib/directives/ng-gx-split-text.directive';\nexport * from './lib/models/options';\nexport * from './lib/models/default-options';\nexport * from './lib/ng-gx-split-text.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["fromEvent","Directive","ElementRef","Input","NgModule"],"mappings":"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"}