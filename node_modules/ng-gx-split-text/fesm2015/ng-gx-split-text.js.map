{"version":3,"file":"ng-gx-split-text.js","sources":["../../../projects/ng-gx-split-text/src/lib/utils/defaults/defaults.ts","../../../projects/ng-gx-split-text/src/lib/models/default-options.ts","../../../projects/ng-gx-split-text/src/lib/utils/split-nodes/split-nodes.ts","../../../projects/ng-gx-split-text/src/lib/directives/ng-gx-split-text.directive.ts","../../../projects/ng-gx-split-text/src/lib/ng-gx-split-text.module.ts","../../../projects/ng-gx-split-text/src/public-api.ts","../../../projects/ng-gx-split-text/src/ng-gx-split-text.ts"],"sourcesContent":["const objectProto = Object.prototype;\nconst hasOwnProperty = objectProto.hasOwnProperty;\n\n\nexport function defaults(object, ...sources) {\n  object = Object(object);\n  sources.forEach((source) => {\n    if (source != null) {\n      source = Object(source);\n      for (const key in source) {\n        if (source.hasOwnProperty(key)) {\n          const value = object[key];\n          if (value === undefined ||\n            (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n            object[key] = source[key];\n          }\n        }\n      }\n    }\n  });\n  return object;\n}\n\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n","import { Options } from './options';\n\nexport const defaultOptions: Options = {\n  defer: false,\n  onlyWords: false,\n  mask: false,\n};\n","import { fromEvent } from 'rxjs';\nimport { Options } from \"../../models/options\";\n\nexport class SplitNodes {\n\n  constructor(\n    private textContent: string,\n    private el: HTMLElement,\n    private options: Options\n  ) {\n  }\n\n  words: HTMLElement[] = [];\n  chars: HTMLElement[] = [];\n  lineWords: HTMLElement[] = [];\n  lineChars: HTMLElement[] = [];\n\n  wordsArray: HTMLElement[][] = [];\n  nodes = [];\n\n  nodeTypes = {\n    ELEMENT_NODE: 1,\n    ATTRIBUTE_NODE: 2,\n    TEXT_NODE: 3,\n    CDATA_SECTION_NODE: 4,\n    ENTITY_REFERENCE_NODE: 5,\n    ENTITY_NODE: 6,\n    PROCESSING_INSTRUCTION_NODE: 7,\n    COMMENT_NODE: 8,\n    DOCUMENT_NODE: 9,\n    DOCUMENT_TYPE_NODE: 10,\n    DOCUMENT_FRAGMENT_NODE: 11,\n    NOTATION_NODE: 12\n  };\n\n  initSplitNodes() {\n    this.splitNodes(this.el);\n    this.initNewNodes();\n    this.setLines();\n    this.updateOnResize();\n  }\n\n\n  splitNodes(el) {\n    for (let i = 0; i < el.childNodes.length; i++) {\n      const node = el.childNodes[i];\n      const tag = [this.nodeTypes.ELEMENT_NODE, this.nodeTypes.DOCUMENT_NODE, this.nodeTypes.DOCUMENT_FRAGMENT_NODE].indexOf(node.nodeType) !== -1;\n      const text = [this.nodeTypes.TEXT_NODE, this.nodeTypes.CDATA_SECTION_NODE].indexOf(node.nodeType) !== -1;\n\n      if (tag) {\n        this.splitNodes(node);\n      } else if (text) {\n        const words = this.splitNodesIntoWords(node);\n\n        const wordsArray = [];\n        words.forEach(chars => {\n          const wordSpan = document.createElement('span');\n          wordSpan.classList.add('split-text-word');\n          wordSpan.style.display = 'inline-block';\n          wordSpan.style.textIndent = '0';\n\n          if (this.options.onlyWords) {\n            wordSpan.innerHTML = chars.join('');\n          } else {\n            chars.forEach(char => {\n              const charSpan = document.createElement('span');\n              charSpan.classList.add('split-text-char');\n              charSpan.style.display = 'inherit';\n              charSpan.style.textIndent = '0';\n              charSpan.innerHTML = char;\n              wordSpan.appendChild(charSpan);\n              this.chars.push(charSpan);\n            });\n          }\n\n          wordsArray.push(wordSpan);\n          this.words.push(wordSpan);\n        });\n\n        this.wordsArray.push(wordsArray);\n        this.nodes.push(node);\n      }\n    }\n  }\n\n  initNewNodes() {\n    this.nodes.forEach((node, index) => {\n      this.wordsArray[index].forEach((word, idx) => {\n        let maskSpan: HTMLElement;\n        if (this.options.mask) {\n          maskSpan = document.createElement('span');\n          maskSpan.classList.add('split-text-mask');\n          maskSpan.style.display = 'inline-block';\n          maskSpan.style.overflow = 'hidden';\n          maskSpan.style.textIndent = '0';\n          maskSpan.style.verticalAlign = 'top';\n          maskSpan.appendChild(word)\n          node.parentNode.insertBefore(maskSpan, node);\n        } else {\n          node.parentNode.insertBefore(word, node);\n        }\n\n        const spaceSpan = document.createElement('span');\n        spaceSpan.classList.add('split-text-space');\n        spaceSpan.style.display = 'inline';\n        spaceSpan.innerHTML = ' ';\n\n        if (this.options.mask) {\n          node.parentNode.insertBefore(spaceSpan, maskSpan.nextSibling);\n        } else {\n          node.parentNode.insertBefore(spaceSpan, word.nextSibling);\n        }\n\n        if (idx === this.wordsArray[index].length - 1) {\n          node.remove();\n        }\n      });\n    });\n  }\n\n  splitNodesIntoWords(word) {\n    const words = word.textContent.split(' ');\n\n    if (words[0] === '') {\n      words.splice(0, 1);\n    }\n\n    if (words[words.length - 1] === '') {\n      words.splice(words.length - 1, 1);\n    }\n\n    return words.map(item => item.split(''));\n  }\n\n  getLines(elements) {\n    const lineElements = [];\n    let line = [];\n    let lineIndex = 0;\n\n    elements.forEach((el, index) => {\n\n      const firstElTop = elements[lineIndex].getBoundingClientRect().top;\n      const lastElIndex = elements.length - 1;\n\n      if (el.getBoundingClientRect().top === firstElTop) {\n        line.push(el);\n        if (index === lastElIndex) {\n          lineElements.push(line);\n        }\n      } else {\n        lineElements.push(line);\n        lineIndex = index;\n        line = [];\n        line.push(el);\n      }\n    });\n\n    return lineElements;\n  }\n\n  updateOnResize() {\n    fromEvent<UIEvent>(window, 'resize')\n      .subscribe(() => {\n        this.setLines();\n      });\n  }\n\n  setLines() {\n    this.lineWords = this.getLines(this.words);\n    if (!this.options.onlyWords) {\n      this.lineChars = this.getLines(this.chars);\n    }\n  }\n}\n","import { AfterViewInit, Directive, ElementRef, Input, OnInit } from '@angular/core';\nimport { defaults } from '../utils/defaults/defaults';\nimport { Options } from '../models/options';\nimport { defaultOptions } from '../models/default-options';\nimport { SplitNodes } from '../utils/split-nodes/split-nodes';\n\n@Directive({\n  selector: '[ngGxSplitText], ngGxSplitText'\n})\n\nexport class NgGxSplitTextDirective implements OnInit, AfterViewInit {\n  @Input('splitOptions') options: Options = defaultOptions;\n\n  private srcTextContent: string;\n  private init = false;\n  private currentOptions: Options;\n  private splitNodes: SplitNodes;\n\n  constructor(\n    private el: ElementRef<HTMLElement>,\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.setCurrentOptions();\n    this.initSplitNodes();\n  }\n\n  ngAfterViewInit(): void {\n    if (!this.currentOptions.defer) {\n      this.initSplit();\n    }\n  }\n\n  public initSplit() {\n    if (this.init) {\n      console.warn('Warning! Text is already initialized');\n      return;\n    }\n    this.init = true;\n    this.saveSrcText();\n    this.splitNodes.initSplitNodes();\n  }\n\n  private saveSrcText() {\n    this.srcTextContent = this.el.nativeElement.innerHTML;\n  }\n\n  public get words() {\n    return this.splitNodes.words;\n  }\n\n  public get lineWords() {\n    return this.splitNodes.lineWords;\n  }\n\n  public get chars() {\n    if (this.options.onlyWords){\n      console.warn('Warning! You chose only words.');\n      return;\n    }\n    return this.splitNodes.chars;\n  }\n\n  public get lineChars() {\n    if (this.options.onlyWords){\n      console.warn('Warning! You chose only words.');\n      return;\n    }\n    return this.splitNodes.lineChars;\n  }\n\n  public get nativeElement() {\n    return this.el.nativeElement;\n  }\n\n  public get srcText() {\n    return this.srcTextContent;\n  }\n\n  public get isInit() {\n    return this.init;\n  }\n\n  public resetSplit() {\n    this.nativeElement.innerHTML = this.srcText;\n  }\n\n  private setCurrentOptions() {\n    this.currentOptions = defaults(this.options, defaultOptions);\n  }\n\n  private initSplitNodes() {\n    this.splitNodes = new SplitNodes(this.el.nativeElement.textContent, this.el.nativeElement, this.currentOptions);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NgGxSplitTextDirective } from \"./directives/ng-gx-split-text.directive\";\n\n\n\n@NgModule({\n  declarations: [NgGxSplitTextDirective],\n  imports: [\n  ],\n  exports: [NgGxSplitTextDirective]\n})\nexport class NgGxSplitTextModule { }\n","/*\n * Public API Surface of ng-gx-split-text\n */\n\nexport * from './lib/directives/ng-gx-split-text.directive';\nexport * from './lib/models/options';\nexport * from './lib/models/default-options';\nexport * from './lib/ng-gx-split-text.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;;AAAA,MAAM,WAAW,GAAG,MAAM,CAAC,SAAS,CAAC;AACrC,MAAM,cAAc,GAAG,WAAW,CAAC,cAAc,CAAC;SAGlC,QAAQ,CAAC,MAAM,EAAE,GAAG,OAAO;IACzC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;IACxB,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM;QACrB,IAAI,MAAM,IAAI,IAAI,EAAE;YAClB,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;YACxB,KAAK,MAAM,GAAG,IAAI,MAAM,EAAE;gBACxB,IAAI,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;oBAC9B,MAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;oBAC1B,IAAI,KAAK,KAAK,SAAS;yBACpB,EAAE,CAAC,KAAK,EAAE,WAAW,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,EAAE;wBACpE,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;qBAC3B;iBACF;aACF;SACF;KACF,CAAC,CAAC;IACH,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,SAAS,EAAE,CAAC,KAAK,EAAE,KAAK;IACtB,OAAO,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,IAAI,KAAK,KAAK,KAAK,CAAC,CAAC;AACjE;;MCvBa,cAAc,GAAY;IACrC,KAAK,EAAE,KAAK;IACZ,SAAS,EAAE,KAAK;IAChB,IAAI,EAAE,KAAK;;;MCFA,UAAU;IAErB,YACU,WAAmB,EACnB,EAAe,EACf,OAAgB;QAFhB,gBAAW,GAAX,WAAW,CAAQ;QACnB,OAAE,GAAF,EAAE,CAAa;QACf,YAAO,GAAP,OAAO,CAAS;QAI1B,UAAK,GAAkB,EAAE,CAAC;QAC1B,UAAK,GAAkB,EAAE,CAAC;QAC1B,cAAS,GAAkB,EAAE,CAAC;QAC9B,cAAS,GAAkB,EAAE,CAAC;QAE9B,eAAU,GAAoB,EAAE,CAAC;QACjC,UAAK,GAAG,EAAE,CAAC;QAEX,cAAS,GAAG;YACV,YAAY,EAAE,CAAC;YACf,cAAc,EAAE,CAAC;YACjB,SAAS,EAAE,CAAC;YACZ,kBAAkB,EAAE,CAAC;YACrB,qBAAqB,EAAE,CAAC;YACxB,WAAW,EAAE,CAAC;YACd,2BAA2B,EAAE,CAAC;YAC9B,YAAY,EAAE,CAAC;YACf,aAAa,EAAE,CAAC;YAChB,kBAAkB,EAAE,EAAE;YACtB,sBAAsB,EAAE,EAAE;YAC1B,aAAa,EAAE,EAAE;SAClB,CAAC;KAvBD;IAyBD,cAAc;QACZ,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACzB,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,IAAI,CAAC,QAAQ,EAAE,CAAC;QAChB,IAAI,CAAC,cAAc,EAAE,CAAC;KACvB;IAGD,UAAU,CAAC,EAAE;QACX,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC7C,MAAM,IAAI,GAAG,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAC9B,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,CAAC,sBAAsB,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;YAC7I,MAAM,IAAI,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;YAEzG,IAAI,GAAG,EAAE;gBACP,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;aACvB;iBAAM,IAAI,IAAI,EAAE;gBACf,MAAM,KAAK,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;gBAE7C,MAAM,UAAU,GAAG,EAAE,CAAC;gBACtB,KAAK,CAAC,OAAO,CAAC,KAAK;oBACjB,MAAM,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;oBAChD,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;oBAC1C,QAAQ,CAAC,KAAK,CAAC,OAAO,GAAG,cAAc,CAAC;oBACxC,QAAQ,CAAC,KAAK,CAAC,UAAU,GAAG,GAAG,CAAC;oBAEhC,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE;wBAC1B,QAAQ,CAAC,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;qBACrC;yBAAM;wBACL,KAAK,CAAC,OAAO,CAAC,IAAI;4BAChB,MAAM,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;4BAChD,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;4BAC1C,QAAQ,CAAC,KAAK,CAAC,OAAO,GAAG,SAAS,CAAC;4BACnC,QAAQ,CAAC,KAAK,CAAC,UAAU,GAAG,GAAG,CAAC;4BAChC,QAAQ,CAAC,SAAS,GAAG,IAAI,CAAC;4BAC1B,QAAQ,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;4BAC/B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;yBAC3B,CAAC,CAAC;qBACJ;oBAED,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oBAC1B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;iBAC3B,CAAC,CAAC;gBAEH,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBACjC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACvB;SACF;KACF;IAED,YAAY;QACV,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,KAAK;YAC7B,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,GAAG;gBACvC,IAAI,QAAqB,CAAC;gBAC1B,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE;oBACrB,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;oBAC1C,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;oBAC1C,QAAQ,CAAC,KAAK,CAAC,OAAO,GAAG,cAAc,CAAC;oBACxC,QAAQ,CAAC,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAC;oBACnC,QAAQ,CAAC,KAAK,CAAC,UAAU,GAAG,GAAG,CAAC;oBAChC,QAAQ,CAAC,KAAK,CAAC,aAAa,GAAG,KAAK,CAAC;oBACrC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,CAAA;oBAC1B,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;iBAC9C;qBAAM;oBACL,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;iBAC1C;gBAED,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;gBACjD,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;gBAC5C,SAAS,CAAC,KAAK,CAAC,OAAO,GAAG,QAAQ,CAAC;gBACnC,SAAS,CAAC,SAAS,GAAG,GAAG,CAAC;gBAE1B,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE;oBACrB,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,SAAS,EAAE,QAAQ,CAAC,WAAW,CAAC,CAAC;iBAC/D;qBAAM;oBACL,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;iBAC3D;gBAED,IAAI,GAAG,KAAK,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;oBAC7C,IAAI,CAAC,MAAM,EAAE,CAAC;iBACf;aACF,CAAC,CAAC;SACJ,CAAC,CAAC;KACJ;IAED,mBAAmB,CAAC,IAAI;QACtB,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAE1C,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE;YACnB,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;SACpB;QAED,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;YAClC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;SACnC;QAED,OAAO,KAAK,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;KAC1C;IAED,QAAQ,CAAC,QAAQ;QACf,MAAM,YAAY,GAAG,EAAE,CAAC;QACxB,IAAI,IAAI,GAAG,EAAE,CAAC;QACd,IAAI,SAAS,GAAG,CAAC,CAAC;QAElB,QAAQ,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,KAAK;YAEzB,MAAM,UAAU,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC,qBAAqB,EAAE,CAAC,GAAG,CAAC;YACnE,MAAM,WAAW,GAAG,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;YAExC,IAAI,EAAE,CAAC,qBAAqB,EAAE,CAAC,GAAG,KAAK,UAAU,EAAE;gBACjD,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACd,IAAI,KAAK,KAAK,WAAW,EAAE;oBACzB,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACzB;aACF;iBAAM;gBACL,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACxB,SAAS,GAAG,KAAK,CAAC;gBAClB,IAAI,GAAG,EAAE,CAAC;gBACV,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;aACf;SACF,CAAC,CAAC;QAEH,OAAO,YAAY,CAAC;KACrB;IAED,cAAc;QACZ,SAAS,CAAU,MAAM,EAAE,QAAQ,CAAC;aACjC,SAAS,CAAC;YACT,IAAI,CAAC,QAAQ,EAAE,CAAC;SACjB,CAAC,CAAC;KACN;IAED,QAAQ;QACN,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC3C,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE;YAC3B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC5C;KACF;;;MClKU,sBAAsB;IAQjC,YACU,EAA2B;QAA3B,OAAE,GAAF,EAAE,CAAyB;QARd,YAAO,GAAY,cAAc,CAAC;QAGjD,SAAI,GAAG,KAAK,CAAC;KAOpB;IAED,QAAQ;QACN,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,IAAI,CAAC,cAAc,EAAE,CAAC;KACvB;IAED,eAAe;QACb,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE;YAC9B,IAAI,CAAC,SAAS,EAAE,CAAC;SAClB;KACF;IAEM,SAAS;QACd,IAAI,IAAI,CAAC,IAAI,EAAE;YACb,OAAO,CAAC,IAAI,CAAC,sCAAsC,CAAC,CAAC;YACrD,OAAO;SACR;QACD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,IAAI,CAAC,UAAU,CAAC,cAAc,EAAE,CAAC;KAClC;IAEO,WAAW;QACjB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,SAAS,CAAC;KACvD;IAED,IAAW,KAAK;QACd,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC;KAC9B;IAED,IAAW,SAAS;QAClB,OAAO,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;KAClC;IAED,IAAW,KAAK;QACd,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,EAAC;YACzB,OAAO,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;YAC/C,OAAO;SACR;QACD,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC;KAC9B;IAED,IAAW,SAAS;QAClB,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,EAAC;YACzB,OAAO,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;YAC/C,OAAO;SACR;QACD,OAAO,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;KAClC;IAED,IAAW,aAAa;QACtB,OAAO,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC;KAC9B;IAED,IAAW,OAAO;QAChB,OAAO,IAAI,CAAC,cAAc,CAAC;KAC5B;IAED,IAAW,MAAM;QACf,OAAO,IAAI,CAAC,IAAI,CAAC;KAClB;IAEM,UAAU;QACf,IAAI,CAAC,aAAa,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC;KAC7C;IAEO,iBAAiB;QACvB,IAAI,CAAC,cAAc,GAAG,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;KAC9D;IAEO,cAAc;QACpB,IAAI,CAAC,UAAU,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,WAAW,EAAE,IAAI,CAAC,EAAE,CAAC,aAAa,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;KACjH;;;YAxFF,SAAS,SAAC;gBACT,QAAQ,EAAE,gCAAgC;aAC3C;;;YARkC,UAAU;;;sBAW1C,KAAK,SAAC,cAAc;;;MCAV,mBAAmB;;;YAN/B,QAAQ,SAAC;gBACR,YAAY,EAAE,CAAC,sBAAsB,CAAC;gBACtC,OAAO,EAAE,EACR;gBACD,OAAO,EAAE,CAAC,sBAAsB,CAAC;aAClC;;;ACVD;;;;ACAA;;;;;;"}